architecture MVC : 
Modéle : Communiquent avec la base de données
Vue : Présentation de l'interface utilisateur
Control : Actions effectuées par les utilisateurs

Vue et Control liées, un changement d'un coté necessite un changement dans l'autre
Nombre enorme de fichiers


Domain Driven Design DDD - 2003
DDD (Domain-Driven Design) est une approche du développement logiciel axée sur le domaine ou la sphère de 
connaissances des utilisateurs. 
Elle s'intéresse aux besoins complexes des utilisateurs du logiciel : on ne gaspille pas ses forces à des choses inutiles. 

Un de ses objectifs est de définir une vision et un langage partagés par toutes les personnes impliquées dans la construction d’une application, 
afin de mieux en appréhender la complexité.


Architecture hexagonale - port adapter - clean architecture - Alistair CockBurn - 2005/2015
https://blog.octo.com/architecture-hexagonale-trois-principes-et-un-exemple-dimplementation/
Séparation de la logique metier de l'infrastructure

Permettre à une application d’être pilotée aussi bien par des utilisateurs que par des programmes, 
des tests automatisés ou des scripts batchs, et d’être développée et testée en isolation de ses éventuels systèmes d’exécution et bases de données.

3 zones :
User-Side/Left-Side - Ce qu'on fournit à l'utilisateur final, avec quoi il interagit - HTTP consomatteur
Business-Logic/centre - Le metier, les régles metier. un expert metier peut lire. c'est l'exagone
Server-Side/right-Side - Ce dont on dépend - Database, files, HTTP fournisseur

Pourquoi ?
Séparation des problème et concentration sur la logique applicative/metier/infrastructure
La logique metier est séparé dans un endroit à part, on peut la raffiner ou la tester facilement sans voir les autres partie.
